import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
  id 'java-library'
  id 'net.neoforged.moddev' version '2.0.107'
  id 'org.jetbrains.kotlin.jvm' version '2.2.10'
}

version = mod_version
group = mod_group_id
base.archivesName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21

neoForge {
  version = neo_version
  parchment {
    mappingsVersion = project.parchment_mappings_version
    minecraftVersion = project.parchment_minecraft_version
  }
  runs {
    client {
      client()
      systemProperty 'neoforge.enabledGameTestNamespace', project.mod_id
    }
    server {
      server()
      programArgument '--nogui'
      systemProperty 'neoforge.enabledGameTestNamespace', project.mod_id
    }
    data {
      clientData()
      programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
    configureEach {
      systemProperty 'forge.loggings.markers', 'REGISTRIES'
      logLevel = org.slf4j.event.Level.DEBUG
    }
  }
  mods {
    "${mod_id}" {
      sourceSet(sourceSets.main)
    }
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  maven {
    name = 'Kotlin for Forge'
    url = 'https://thedarkcolour.github.io/KotlinForForge/'
    content { includeGroup 'thedarkcolour' }
  }
}

dependencies {
  implementation "thedarkcolour:kotlinforforge-neoforge:${kff_version}"
}

var generateModMetadata = tasks.register('generateModMetadata', ProcessResources) {
  var replaceProperties = [
    minecraft_version_range: minecraft_version_range,
    neo_version: neo_version,
    mod_id: mod_id,
    mod_name: mod_name,
    mod_license: mod_license,
    mod_version: mod_version,
    mod_authors: mod_authors,
    mod_description: mod_description
  ]
  inputs.properties replaceProperties
  expand replaceProperties
  from 'src/main/templates'
  into 'build/generated/sources/modMetadata'
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}
